//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: tentusscher_model_2006_endo
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on Tue May  7 22:01:56 2019
//! 
//! <autogenerated>

#include "ten_tusscher_ischemic_model_endoBackwardEuler.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "CardiacNewtonSolver.hpp"
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables);
        }
        return mpInstance.get();
    }
    
    void FreeMemory()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }
    
    // Row lookup methods
    // using linear-interpolation
    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<31; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }
    
    
    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }
    
// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
    }
    
protected:
    Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables(const Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables&);
    Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables& operator= (const Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables&);
    Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);
        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 31;
        mTableMins[0] = -100.0001;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mTableMaxs[0] = 99.9999;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;
        Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables::RegenerateTables();
    }
    
    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][31];
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][0] = (1.0 / (1.0 + exp(( -8.0 - var_chaste_interface__membrane__V) * 0.13333333333333333))) / ((1.0 * ((1.3999999999999999 / (1.0 + exp(( -35.0 - var_chaste_interface__membrane__V) * 0.076923076923076927))) + 0.25) * (1.3999999999999999 / (1.0 + exp((var_chaste_interface__membrane__V + 5.0) * 0.20000000000000001)))) + (1.0 / (1.0 + exp((50.0 - var_chaste_interface__membrane__V) * 0.050000000000000003))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][1] =  -1.0 / ((1.0 * ((1.3999999999999999 / (1.0 + exp(( -35.0 - var_chaste_interface__membrane__V) * 0.076923076923076927))) + 0.25) * (1.3999999999999999 / (1.0 + exp((var_chaste_interface__membrane__V + 5.0) * 0.20000000000000001)))) + (1.0 / (1.0 + exp((50.0 - var_chaste_interface__membrane__V) * 0.050000000000000003))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][2] = (0.67000000000000004 / (1.0 + exp((var_chaste_interface__membrane__V + 35.0) * 0.14285714285714285))) + 0.33000000000000002;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][3] = 1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 20.0) * 0.14285714285714285));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][4] = (1.0 / pow(1.0 + exp(( -56.859999999999999 - var_chaste_interface__membrane__V) * 0.11074197120708749), 2.0)) / (1.0 * (1.0 / (1.0 + exp(( -60.0 - var_chaste_interface__membrane__V) * 0.20000000000000001))) * ((0.10000000000000001 / (1.0 + exp((var_chaste_interface__membrane__V + 35.0) * 0.20000000000000001))) + (0.10000000000000001 / (1.0 + exp((var_chaste_interface__membrane__V - 50.0) * 0.0050000000000000001)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][5] =  -1.0 / (1.0 * (1.0 / (1.0 + exp(( -60.0 - var_chaste_interface__membrane__V) * 0.20000000000000001))) * ((0.10000000000000001 / (1.0 + exp((var_chaste_interface__membrane__V + 35.0) * 0.20000000000000001))) + (0.10000000000000001 / (1.0 + exp((var_chaste_interface__membrane__V - 50.0) * 0.0050000000000000001)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][6] = (1.0 / (1.0 + exp(( -26.0 - var_chaste_interface__membrane__V) * 0.14285714285714285))) / (1.0 * (450.0 / (1.0 + exp(( -45.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) * (6.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.086956521739130432))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][7] =  -1.0 / (1.0 * (450.0 / (1.0 + exp(( -45.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) * (6.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.086956521739130432))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][8] = (1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 88.0) * 0.041666666666666664))) / (1.0 * (3.0 / (1.0 + exp(( -60.0 - var_chaste_interface__membrane__V) * 0.050000000000000003))) * (1.1200000000000001 / (1.0 + exp((var_chaste_interface__membrane__V - 60.0) * 0.050000000000000003))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][9] =  -1.0 / (1.0 * (3.0 / (1.0 + exp(( -60.0 - var_chaste_interface__membrane__V) * 0.050000000000000003))) * (1.1200000000000001 / (1.0 + exp((var_chaste_interface__membrane__V - 60.0) * 0.050000000000000003))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][10] = (1.0 / (1.0 + exp(( -5.0 - var_chaste_interface__membrane__V) * 0.071428571428571425))) / ((1.0 * (1400.0 / sqrt(1.0 + exp((5.0 - var_chaste_interface__membrane__V) * 0.16666666666666666))) * (1.0 / (1.0 + exp((var_chaste_interface__membrane__V - 35.0) * 0.066666666666666666)))) + 80.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][11] =  -1.0 / ((1.0 * (1400.0 / sqrt(1.0 + exp((5.0 - var_chaste_interface__membrane__V) * 0.16666666666666666))) * (1.0 / (1.0 + exp((var_chaste_interface__membrane__V - 35.0) * 0.066666666666666666)))) + 80.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][12] = (1.0 / (1.0 + exp((20.0 - var_chaste_interface__membrane__V) * 0.16666666666666666))) / ((9.5 * exp((-pow(var_chaste_interface__membrane__V + 40.0, 2.0)) * 0.00055555555555555556)) + 0.80000000000000004);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][13] =  -1.0 / ((9.5 * exp((-pow(var_chaste_interface__membrane__V + 40.0, 2.0)) * 0.00055555555555555556)) + 0.80000000000000004);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][14] = (1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 28.0) * 0.20000000000000001))) / ((1000.0 * exp((-pow(var_chaste_interface__membrane__V + 67.0, 2.0)) * 0.001)) + 8.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][15] =  -1.0 / ((1000.0 * exp((-pow(var_chaste_interface__membrane__V + 67.0, 2.0)) * 0.001)) + 8.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][16] = 0.25 * exp(0.074867781645490947 * (var_chaste_interface__membrane__V - 15.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][17] = exp((0.037433890822745473 * var_chaste_interface__membrane__V) *  -0.65000000000000002);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][18] = 1.0 / ((exp((0.037433890822745473 * var_chaste_interface__membrane__V) *  -0.65000000000000002) * 0.10000000000000001) + 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][19] = exp(0.013101861787960915 * var_chaste_interface__membrane__V);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][20] = 1.0 / (exp(0.074867781645490947 * (var_chaste_interface__membrane__V - 15.0)) - 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][21] = 1.0 / ((1.0 + (0.1245 * exp( -0.10000000000000001 * ((3.8797490106562429e-07 * var_chaste_interface__membrane__V) * 96485.341499999995)))) + (0.035299999999999998 * exp(-((3.8797490106562429e-07 * var_chaste_interface__membrane__V) * 96485.341499999995))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][22] = ((var_chaste_interface__membrane__V < 14.999000000000001) || (15.000999999999999 < var_chaste_interface__membrane__V)) ? (((0.25 * (1.0 / (exp(0.074867781645490947 * (var_chaste_interface__membrane__V - 15.0)) - 1.0))) * exp(0.074867781645490947 * (var_chaste_interface__membrane__V - 15.0))) * (var_chaste_interface__membrane__V - 15.0)) : 3.3392200840240722;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][23] = 1.0 / (1.0 + exp(4.1806020080000001 - (0.16722408029999999 * var_chaste_interface__membrane__V)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][24] = exp(((var_chaste_interface__membrane__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][25] = exp(((var_chaste_interface__membrane__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][26] = 1.0 + (0.1245 * exp((var_chaste_interface__membrane__V *  -9648.5341499999995) * 3.8797490106562429e-07)) + (0.035299999999999998 * exp(((-var_chaste_interface__membrane__V) * 96485.341499999995) * 3.8797490106562429e-07));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][27] = exp((var_chaste_interface__membrane__V * 33769.869524999995) * 3.8797490106562429e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][28] = exp((var_chaste_interface__membrane__V *  -62715.471975) * 3.8797490106562429e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][29] = 1.0 + (0.10000000000000001 * exp((var_chaste_interface__membrane__V *  -62715.471975) * 3.8797490106562429e-07));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][30] = 1.0 + exp((25.0 - var_chaste_interface__membrane__V) * 0.16722408026755853);
            }
            
            mNeedsRegeneration[0] = false;
        }
        
        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }
    
private:
    /** The single instance of the class */
    static std::shared_ptr<Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[31];
    
    // Lookup tables
    double (*_lookup_table_0)[31];
    
};

std::shared_ptr<Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables> Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_amplitude =  -52.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude),
                mParameters[21],
                mParameters[23],
                mParameters[22]
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[13];
    }
    
    Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler::Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractBackwardEulerCardiacCell<7>(
                19,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        this->mParameters[0] = 0.00036; // (c,calcium_dynamics__V_leak) [per_millisecond]
        this->mParameters[1] = 0.102; // (c,calcium_dynamics__V_rel) [per_millisecond]
        this->mParameters[2] = 0.006375; // (c,calcium_dynamics__Vmax_up) [millimolar_per_millisecond]
        this->mParameters[3] = 1; // (c,sodium_dynamics__conc_clamp) [dimensionless]
        this->mParameters[4] = 2; // (c,calcium_dynamics__Ca_o) [millimolar]
        this->mParameters[5] = 5.4; // (c,potassium_dynamics__K_o) [millimolar]
        this->mParameters[6] = 140; // (c,sodium_dynamics__Na_o) [millimolar]
        this->mParameters[7] = 0.0000398; // (c,L_type_Ca_current__g_CaL) [litre_per_farad_second]
        this->mParameters[8] = 0.000592; // (c,calcium_background_current__g_bca) [nanoS_per_picoF]
        this->mParameters[9] = 0.00029; // (c,sodium_background_current__g_bna) [nanoS_per_picoF]
        this->mParameters[10] = 0.1238; // (c,calcium_pump_current__g_pCa) [picoA_per_picoF]
        this->mParameters[11] = 0.185; // (c,membrane__Cm) [microF]
        this->mParameters[12] = 14.838; // (c,fast_sodium_current__g_Na) [nanoS_per_picoF]
        this->mParameters[13] = 0; // (c,fast_sodium_current__perc_reduced_inact_for_IpNa) [dimensionless]
        this->mParameters[14] = 0; // (c,fast_sodium_current__shift_INa_inact) [millivolt]
        this->mParameters[15] = 5.405; // (c,inward_rectifier_potassium_current__g_K1) [nanoS_per_picoF]
        this->mParameters[16] = 0.0146; // (c,potassium_pump_current__g_pK) [nanoS_per_picoF]
        this->mParameters[17] = 0.153; // (c,rapid_time_dependent_potassium_current__g_Kr) [nanoS_per_picoF]
        this->mParameters[18] = 0.392; // (c,slow_time_dependent_potassium_current__g_Ks) [nanoS_per_picoF]
        this->mParameters[19] = 1000; // (c,sodium_calcium_exchanger_current__K_NaCa) [picoA_per_picoF]
        this->mParameters[20] = 2.724; // (c,sodium_potassium_pump_current__P_NaK) [picoA_per_picoF]
        this->mParameters[21] = 1; // (c,chaste_interface__membrane__stim_duration) [millisecond]
        this->mParameters[22] = 100; // (c,chaste_interface__membrane__stim_start) [millisecond]
        this->mParameters[23] = 1000; // (c,chaste_interface__membrane__stim_period) [millisecond]
        this->mParameters[24] = 0.073; // (c,transient_outward_current__g_to) [nanoS_per_picoF]
    }
    
    Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler::~Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler()
    {
    }
    
    AbstractLookupTableCollection* Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler::GetLookupTableCollection()
    {
        return Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables::Instance();
    }
    
    void Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler::VerifyStateVariables()
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.00155
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[5];
        // Units: dimensionless; Initial value: 0.7573
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[6];
        // Units: dimensionless; Initial value: 0.7225
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 3.164e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.8009
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.9778
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = rY[10];
        // Units: dimensionless; Initial value: 0.9953
        
        if (var_chaste_interface__L_type_Ca_current_f2_gate__f2 < 0)
        {
            EXCEPTION(DumpState("State variable membrane_L_type_calcium_current_f2_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__L_type_Ca_current_d_gate__d < 0)
        {
            EXCEPTION(DumpState("State variable membrane_L_type_calcium_current_d_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__fast_sodium_current_h_gate__h < 0)
        {
            EXCEPTION(DumpState("State variable membrane_fast_sodium_current_h_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__fast_sodium_current_j_gate__j < 0)
        {
            EXCEPTION(DumpState("State variable membrane_fast_sodium_current_j_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__fast_sodium_current_m_gate__m < 0)
        {
            EXCEPTION(DumpState("State variable membrane_fast_sodium_current_m_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__L_type_Ca_current_f_gate__f < 0)
        {
            EXCEPTION(DumpState("State variable membrane_L_type_calcium_current_f_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__L_type_Ca_current_fCass_gate__fCass < 0)
        {
            EXCEPTION(DumpState("State variable membrane_L_type_calcium_current_fCa_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__fast_sodium_current_m_gate__m > 1)
        {
            EXCEPTION(DumpState("State variable membrane_fast_sodium_current_m_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__fast_sodium_current_h_gate__h > 1)
        {
            EXCEPTION(DumpState("State variable membrane_fast_sodium_current_h_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__L_type_Ca_current_d_gate__d > 1)
        {
            EXCEPTION(DumpState("State variable membrane_L_type_calcium_current_d_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__L_type_Ca_current_f2_gate__f2 > 1)
        {
            EXCEPTION(DumpState("State variable membrane_L_type_calcium_current_f2_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__fast_sodium_current_j_gate__j > 1)
        {
            EXCEPTION(DumpState("State variable membrane_fast_sodium_current_j_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__L_type_Ca_current_fCass_gate__fCass > 1)
        {
            EXCEPTION(DumpState("State variable membrane_L_type_calcium_current_fCa_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__L_type_Ca_current_f_gate__f > 1)
        {
            EXCEPTION(DumpState("State variable membrane_L_type_calcium_current_f_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
    }
    
    double Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.709
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = rY[1];
        // Units: dimensionless; Initial value: 0.00448
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = rY[2];
        // Units: dimensionless; Initial value: 0.476
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = rY[3];
        // Units: dimensionless; Initial value: 0.0087
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.00155
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[5];
        // Units: dimensionless; Initial value: 0.7573
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[6];
        // Units: dimensionless; Initial value: 0.7225
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 3.164e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.8009
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.9778
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = rY[10];
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = rY[11];
        // Units: dimensionless; Initial value: 0.3212
        double var_chaste_interface__transient_outward_current_r_gate__r = rY[12];
        // Units: dimensionless; Initial value: 2.235e-8
        double var_chaste_interface__calcium_dynamics__Ca_i = rY[13];
        // Units: millimolar; Initial value: 0.00013
        double var_chaste_interface__calcium_dynamics__Ca_ss = rY[15];
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__sodium_dynamics__Na_i = rY[17];
        // Units: millimolar; Initial value: 10.355
        double var_chaste_interface__potassium_dynamics__K_i = rY[18];
        // Units: millimolar; Initial value: 138.4
        
        // Lookup table indexing
        const bool _oob_0 = Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(mParameters[5] / var_chaste_interface__potassium_dynamics__K_i); // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 200.0))); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = mParameters[15] * (var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + (((3.0 * exp(0.00020000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) + 100.0))) + exp(0.10000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 10.0))) / (1.0 + exp( -0.5 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)))))) * sqrt(mParameters[5] * 0.18518518518518517) * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_transient_outward_current__i_to = mParameters[24] * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr = mParameters[17] * sqrt(mParameters[5] * 0.18518518518518517) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks = mParameters[18] * pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0) * (var_chaste_interface__membrane__V - (26.713760659695648 * log((mParameters[5] + (0.029999999999999999 * mParameters[6])) / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i))))); // picoA_per_picoF
        const double var_L_type_Ca_current__i_CaL = ((((var_chaste_interface__membrane__V < 14.999000000000001) || (var_chaste_interface__membrane__V > 15.000999999999999)) ? (((var_chaste_interface__membrane__V - 15.0) * ((0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * _lt_0_row[24]) - mParameters[4])) / _lt_0_row[25]) : (((( -0.00099999999999944578 * ((var_chaste_interface__calcium_dynamics__Ca_ss * 0.24998128375521925) - mParameters[4])) *  -13357.380336096434) + ((0.00099999999999944578 * ((var_chaste_interface__calcium_dynamics__Ca_ss * 0.25001871764607692) - mParameters[4])) * 13356.380336110949)) * 0.5)) * mParameters[7] * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * 37237684497.486488) * 3.8797490106562429e-07; // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = ((((mParameters[20] * mParameters[5]) / (mParameters[5] + 1.0)) * var_chaste_interface__sodium_dynamics__Na_i) / (var_chaste_interface__sodium_dynamics__Na_i + 40.0)) / _lt_0_row[26]; // picoA_per_picoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(mParameters[6] / var_chaste_interface__sodium_dynamics__Na_i); // millivolt
        const double var_fast_sodium_current__i_Na = mParameters[12] * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na = mParameters[9] * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa = (mParameters[19] * ((_lt_0_row[27] * pow(var_chaste_interface__sodium_dynamics__Na_i, 3.0) * mParameters[4]) - (_lt_0_row[28] * pow(mParameters[6], 3.0) * var_chaste_interface__calcium_dynamics__Ca_i * 2.5))) / ((669921.875 + pow(mParameters[6], 3.0)) * (1.3799999999999999 + mParameters[4]) * _lt_0_row[29]); // picoA_per_picoF
        const double var_calcium_background_current__i_b_Ca = mParameters[8] * (var_chaste_interface__membrane__V - (13.356880329847824 * log(mParameters[4] / var_chaste_interface__calcium_dynamics__Ca_i))); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K = (mParameters[16] * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)) / _lt_0_row[30]; // picoA_per_picoF
        const double var_potassium_atp_current__ATP_i = 3.0; // millimolar
        const double var_potassium_atp_current__i_K_ATP = 0.19500000000000001 * (1.0 / (1.0 - pow(var_potassium_atp_current__ATP_i * 8.7719298245614024, 2.0))) * pow(mParameters[5] * 0.18518518518518517, 0.23999999999999999) * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca = (mParameters[10] * var_chaste_interface__calcium_dynamics__Ca_i) / (var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001); // picoA_per_picoF
        const double var_chaste_interface__L_type_Ca_current__i_CaL = var_L_type_Ca_current__i_CaL; // picoA_per_picoF
        const double var_chaste_interface__sodium_background_current__i_b_Na = var_sodium_background_current__i_b_Na; // picoA_per_picoF
        const double var_chaste_interface__inward_rectifier_potassium_current__i_K1 = var_inward_rectifier_potassium_current__i_K1; // picoA_per_picoF
        const double var_chaste_interface__fast_sodium_current__i_Na = var_fast_sodium_current__i_Na; // picoA_per_picoF
        const double var_chaste_interface__rapid_time_dependent_potassium_current__i_Kr = var_rapid_time_dependent_potassium_current__i_Kr; // picoA_per_picoF
        const double var_chaste_interface__slow_time_dependent_potassium_current__i_Ks = var_slow_time_dependent_potassium_current__i_Ks; // picoA_per_picoF
        const double var_chaste_interface__calcium_pump_current__i_p_Ca = var_calcium_pump_current__i_p_Ca; // picoA_per_picoF
        const double var_chaste_interface__sodium_calcium_exchanger_current__i_NaCa = var_sodium_calcium_exchanger_current__i_NaCa; // picoA_per_picoF
        const double var_chaste_interface__sodium_potassium_pump_current__i_NaK = var_sodium_potassium_pump_current__i_NaK; // picoA_per_picoF
        const double var_chaste_interface__potassium_pump_current__i_p_K = var_potassium_pump_current__i_p_K; // picoA_per_picoF
        const double var_chaste_interface__transient_outward_current__i_to = var_transient_outward_current__i_to; // picoA_per_picoF
        const double var_chaste_interface__calcium_background_current__i_b_Ca = var_calcium_background_current__i_b_Ca; // picoA_per_picoF
        const double var_chaste_interface__i_ionic = (var_chaste_interface__inward_rectifier_potassium_current__i_K1 + var_chaste_interface__transient_outward_current__i_to + var_chaste_interface__rapid_time_dependent_potassium_current__i_Kr + var_chaste_interface__slow_time_dependent_potassium_current__i_Ks + var_chaste_interface__L_type_Ca_current__i_CaL + var_chaste_interface__sodium_potassium_pump_current__i_NaK + var_chaste_interface__fast_sodium_current__i_Na + var_chaste_interface__sodium_background_current__i_b_Na + var_chaste_interface__sodium_calcium_exchanger_current__i_NaCa + var_chaste_interface__calcium_background_current__i_b_Ca + var_chaste_interface__potassium_pump_current__i_p_K + var_potassium_atp_current__i_K_ATP + var_chaste_interface__calcium_pump_current__i_p_Ca) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler::ComputeResidual(double var_chaste_interface__environment__time, const double rCurrentGuess[7], double rResidual[7])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.709
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = rY[1];
        // Units: dimensionless; Initial value: 0.00448
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = rY[2];
        // Units: dimensionless; Initial value: 0.476
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = rY[3];
        // Units: dimensionless; Initial value: 0.0087
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.00155
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[5];
        // Units: dimensionless; Initial value: 0.7573
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[6];
        // Units: dimensionless; Initial value: 0.7225
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 3.164e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.8009
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.9778
        double var_chaste_interface__transient_outward_current_s_gate__s = rY[11];
        // Units: dimensionless; Initial value: 0.3212
        double var_chaste_interface__transient_outward_current_r_gate__r = rY[12];
        // Units: dimensionless; Initial value: 2.235e-8
        
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = rCurrentGuess[0];
        double var_chaste_interface__calcium_dynamics__Ca_SR = rCurrentGuess[1];
        double var_chaste_interface__calcium_dynamics__Ca_i = rCurrentGuess[2];
        double var_chaste_interface__calcium_dynamics__Ca_ss = rCurrentGuess[3];
        double var_chaste_interface__calcium_dynamics__R_prime = rCurrentGuess[4];
        double var_chaste_interface__potassium_dynamics__K_i = rCurrentGuess[5];
        double var_chaste_interface__sodium_dynamics__Na_i = rCurrentGuess[6];
        
        // Lookup table indexing
        const bool _oob_0 = Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(mParameters[5] / var_chaste_interface__potassium_dynamics__K_i); // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 200.0))); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = mParameters[15] * (var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + (((3.0 * exp(0.00020000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) + 100.0))) + exp(0.10000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 10.0))) / (1.0 + exp( -0.5 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)))))) * sqrt(mParameters[5] * 0.18518518518518517) * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_transient_outward_current__i_to = mParameters[24] * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr = mParameters[17] * sqrt(mParameters[5] * 0.18518518518518517) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks = mParameters[18] * pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0) * (var_chaste_interface__membrane__V - (26.713760659695648 * log((mParameters[5] + (0.029999999999999999 * mParameters[6])) / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i))))); // picoA_per_picoF
        const double var_L_type_Ca_current__i_CaL = ((((var_chaste_interface__membrane__V < 14.999000000000001) || (var_chaste_interface__membrane__V > 15.000999999999999)) ? (((var_chaste_interface__membrane__V - 15.0) * ((0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * _lt_0_row[24]) - mParameters[4])) / _lt_0_row[25]) : (((( -0.00099999999999944578 * ((var_chaste_interface__calcium_dynamics__Ca_ss * 0.24998128375521925) - mParameters[4])) *  -13357.380336096434) + ((0.00099999999999944578 * ((var_chaste_interface__calcium_dynamics__Ca_ss * 0.25001871764607692) - mParameters[4])) * 13356.380336110949)) * 0.5)) * mParameters[7] * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * 37237684497.486488) * 3.8797490106562429e-07; // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = ((((mParameters[20] * mParameters[5]) / (mParameters[5] + 1.0)) * var_chaste_interface__sodium_dynamics__Na_i) / (var_chaste_interface__sodium_dynamics__Na_i + 40.0)) / _lt_0_row[26]; // picoA_per_picoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(mParameters[6] / var_chaste_interface__sodium_dynamics__Na_i); // millivolt
        const double var_fast_sodium_current__i_Na = mParameters[12] * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na = mParameters[9] * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa = (mParameters[19] * ((_lt_0_row[27] * pow(var_chaste_interface__sodium_dynamics__Na_i, 3.0) * mParameters[4]) - (_lt_0_row[28] * pow(mParameters[6], 3.0) * var_chaste_interface__calcium_dynamics__Ca_i * 2.5))) / ((669921.875 + pow(mParameters[6], 3.0)) * (1.3799999999999999 + mParameters[4]) * _lt_0_row[29]); // picoA_per_picoF
        const double var_calcium_background_current__i_b_Ca = mParameters[8] * (var_chaste_interface__membrane__V - (13.356880329847824 * log(mParameters[4] / var_chaste_interface__calcium_dynamics__Ca_i))); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K = (mParameters[16] * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)) / _lt_0_row[30]; // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca = (mParameters[10] * var_chaste_interface__calcium_dynamics__Ca_i) / (var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001); // picoA_per_picoF
        const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double var_L_type_Ca_current_fCass_gate__tau_fCass = (80.0 / (1.0 + pow(var_chaste_interface__calcium_dynamics__Ca_ss * 20.0, 2.0))) + 2.0; // millisecond
        const double var_calcium_dynamics__kcasr = 2.5 - (1.5 / (1.0 + pow(1.5 / var_chaste_interface__calcium_dynamics__Ca_SR, 2.0))); // dimensionless
        const double var_calcium_dynamics__k1 = 0.14999999999999999 / var_calcium_dynamics__kcasr; // per_millimolar2_per_millisecond
        const double var_calcium_dynamics__i_rel = mParameters[1] * ((var_calcium_dynamics__k1 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2.0) * var_chaste_interface__calcium_dynamics__R_prime) / (0.059999999999999998 + (var_calcium_dynamics__k1 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2.0)))) * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_ss); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_up = mParameters[2] / (1.0 + (6.2499999999999997e-08 / pow(var_chaste_interface__calcium_dynamics__Ca_i, 2.0))); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_leak = mParameters[0] * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_i); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_xfer = 0.0038 * (var_chaste_interface__calcium_dynamics__Ca_ss - var_chaste_interface__calcium_dynamics__Ca_i); // millimolar_per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_fCass_gate__fCass = (((0.59999999999999998 / (1.0 + pow(var_chaste_interface__calcium_dynamics__Ca_ss * 20.0, 2.0))) + 0.40000000000000002) - var_chaste_interface__L_type_Ca_current_fCass_gate__fCass) / var_L_type_Ca_current_fCass_gate__tau_fCass; // per_millisecond
        const double d_dt_chaste_interface__calcium_dynamics__Ca_i = (1.0 / (1.0 + (0.00020000000000000001 / pow(var_chaste_interface__calcium_dynamics__Ca_i + 0.001, 2.0)))) * (((((var_calcium_dynamics__i_leak - var_calcium_dynamics__i_up) * 0.0010939999999999999) * 60.960741282614002) + var_calcium_dynamics__i_xfer) - ((1.0 * ((var_calcium_background_current__i_b_Ca + var_calcium_pump_current__i_p_Ca) - (2.0 * var_sodium_calcium_exchanger_current__i_NaCa)) * mParameters[11]) * 0.00031590674984870111)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_SR = (1.0 / (1.0 + (3.0 / pow(var_chaste_interface__calcium_dynamics__Ca_SR + 0.29999999999999999, 2.0)))) * (var_calcium_dynamics__i_up - (var_calcium_dynamics__i_rel + var_calcium_dynamics__i_leak)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_ss = (1.0 / (1.0 + (0.0001 / pow(var_chaste_interface__calcium_dynamics__Ca_ss + 0.00025000000000000001, 2.0)))) * (((( -1.0 * var_L_type_Ca_current__i_CaL * mParameters[11]) * 0.094772024954610345) + ((var_calcium_dynamics__i_rel * 0.0010939999999999999) * 18288.2223847842)) - ((var_calcium_dynamics__i_xfer * 0.016403999999999998) * 18288.2223847842)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__R_prime = ((-(0.044999999999999998 * var_calcium_dynamics__kcasr)) * var_chaste_interface__calcium_dynamics__Ca_ss * var_chaste_interface__calcium_dynamics__R_prime) + (0.0050000000000000001 * (1.0 - var_chaste_interface__calcium_dynamics__R_prime)); // per_millisecond
        const double d_dt_chaste_interface__sodium_dynamics__Na_i = (((-mParameters[3]) * 1.0 * (var_fast_sodium_current__i_Na + var_sodium_background_current__i_b_Na + (3.0 * var_sodium_potassium_pump_current__i_NaK) + (3.0 * var_sodium_calcium_exchanger_current__i_NaCa))) * 0.00063181349969740222) * mParameters[11]; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__potassium_dynamics__K_i = (((-mParameters[3]) * 1.0 * ((var_inward_rectifier_potassium_current__i_K1 + var_transient_outward_current__i_to + var_rapid_time_dependent_potassium_current__i_Kr + var_slow_time_dependent_potassium_current__i_Ks + var_potassium_pump_current__i_p_K + (var_chaste_interface__membrane__i_Stim / HeartConfig::Instance()->GetCapacitance())) - (2.0 * var_sodium_potassium_pump_current__i_NaK))) * 0.00063181349969740222) * mParameters[11]; // 'millimole per litre per millisecond'
        
        rResidual[0] = rCurrentGuess[0] - rY[10] - mDt*d_dt_chaste_interface__L_type_Ca_current_fCass_gate__fCass;
        rResidual[2] = rCurrentGuess[2] - rY[13] - mDt*d_dt_chaste_interface__calcium_dynamics__Ca_i;
        rResidual[1] = rCurrentGuess[1] - rY[14] - mDt*d_dt_chaste_interface__calcium_dynamics__Ca_SR;
        rResidual[3] = rCurrentGuess[3] - rY[15] - mDt*d_dt_chaste_interface__calcium_dynamics__Ca_ss;
        rResidual[4] = rCurrentGuess[4] - rY[16] - mDt*d_dt_chaste_interface__calcium_dynamics__R_prime;
        rResidual[6] = rCurrentGuess[6] - rY[17] - mDt*d_dt_chaste_interface__sodium_dynamics__Na_i;
        rResidual[5] = rCurrentGuess[5] - rY[18] - mDt*d_dt_chaste_interface__potassium_dynamics__K_i;
    }
    
    void Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler::ComputeJacobian(double var_chaste_interface__environment__time, const double rCurrentGuess[7], double rJacobian[7][7])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.709
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = rY[1];
        // Units: dimensionless; Initial value: 0.00448
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = rY[2];
        // Units: dimensionless; Initial value: 0.476
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = rY[3];
        // Units: dimensionless; Initial value: 0.0087
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.00155
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[5];
        // Units: dimensionless; Initial value: 0.7573
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[6];
        // Units: dimensionless; Initial value: 0.7225
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 3.164e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.8009
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.9778
        double var_chaste_interface__transient_outward_current_s_gate__s = rY[11];
        // Units: dimensionless; Initial value: 0.3212
        double var_chaste_interface__transient_outward_current_r_gate__r = rY[12];
        // Units: dimensionless; Initial value: 2.235e-8
        
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = rCurrentGuess[0];
        double var_chaste_interface__calcium_dynamics__Ca_SR = rCurrentGuess[1];
        double var_chaste_interface__calcium_dynamics__Ca_i = rCurrentGuess[2];
        double var_chaste_interface__calcium_dynamics__Ca_ss = rCurrentGuess[3];
        double var_chaste_interface__calcium_dynamics__R_prime = rCurrentGuess[4];
        double var_chaste_interface__potassium_dynamics__K_i = rCurrentGuess[5];
        double var_chaste_interface__sodium_dynamics__Na_i = rCurrentGuess[6];
        
        const double var_chaste_interface__environment__dt = mDt;

        // Lookup table indexing
        const bool _oob_0 = Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_t4 = 1.0 / var_chaste_interface__potassium_dynamics__K_i; // dimensionless
        const double var_t8 = (log(var_t4 * mParameters[5]) * 1.0364268649036186e-05) * 2577486.3199999998; // dimensionless
        const double var_t11 = exp(((0.059999999999999998 * var_chaste_interface__membrane__V) - (0.059999999999999998 * var_t8)) - 12.0); // dimensionless
        const double var_t12 = 1.0 + var_t11; // dimensionless
        const double var_t14 = 1.0 / pow(var_t12, 2.0); // dimensionless
        const double var_t15 = var_t14 * mParameters[15]; // dimensionless
        const double var_t16 = 1.0 / var_t12; // dimensionless
        const double var_t21 = exp(((0.00020000000000000001 * var_chaste_interface__membrane__V) - (0.00020000000000000001 * var_t8)) + 0.02); // dimensionless
        const double var_t26 = exp(((0.10000000000000001 * var_chaste_interface__membrane__V) - (0.10000000000000001 * var_t8)) - 1.0); // dimensionless
        const double var_t27 = (3.0 * var_t21) + var_t26; // dimensionless
        const double var_t31 = exp(( -0.5 * var_chaste_interface__membrane__V) + (0.5 * var_t8)); // dimensionless
        const double var_t32 = 1.0 + var_t31; // dimensionless
        const double var_t33 = 1.0 / var_t32; // dimensionless
        const double var_t35 = (0.10000000000000001 * var_t16) + (var_t33 * var_t27); // dimensionless
        const double var_t36 = 1.0 / var_t35; // dimensionless
        const double var_t38 = pow(mParameters[5], 0.5); // dimensionless
        const double var_t39 = var_chaste_interface__membrane__V - var_t8; // dimensionless
        const double var_t40 = var_t39 * var_t38; // dimensionless
        const double var_t44 = var_t16 * mParameters[15]; // dimensionless
        const double var_t47 = (1.0 / pow(var_t35, 2.0)) * var_t44; // dimensionless
        const double var_t56 = (1.0 / pow(var_t32, 2.0)) * var_t27; // dimensionless
        const double var_t63 = var_t38 * var_t36; // dimensionless
        const double var_t64 = var_t63 * var_t44; // dimensionless
        const double var_t67 = var_chaste_interface__transient_outward_current_s_gate__s * (var_chaste_interface__transient_outward_current_r_gate__r * mParameters[24]); // dimensionless
        const double var_t70 = (var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2) * (var_t38 * mParameters[17]); // dimensionless
        const double var_t73 = pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0) * mParameters[18]; // dimensionless
        const double var_t87 = (_lt_0_row[16] * var_chaste_interface__calcium_dynamics__Ca_ss) - mParameters[4]; // dimensionless
        const double var_t97 = var_t87 * (var_chaste_interface__membrane__V - 15.0); // dimensionless
        const double var_t109 = var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f; // dimensionless
        const double var_t118 = mParameters[5] * mParameters[20]; // dimensionless
        const double var_t120 = 1.0 / (mParameters[5] + 1.0); // dimensionless
        const double var_t121 = var_t120 * var_t118; // dimensionless
        const double var_t122 = var_chaste_interface__sodium_dynamics__Na_i + 40.0; // dimensionless
        const double var_t123 = 1.0 / var_t122; // dimensionless
        const double var_t149 = (var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j) * ((pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2.0) * var_chaste_interface__fast_sodium_current_m_gate__m) * mParameters[12]); // dimensionless
        const double var_t157 = pow(var_chaste_interface__sodium_dynamics__Na_i, 2.0); // dimensionless
        const double var_t158 = var_t157 * var_chaste_interface__sodium_dynamics__Na_i; // dimensionless
        const double var_t169 = pow(mParameters[6], 2.0) * mParameters[6]; // dimensionless
        const double var_t170 = var_t169 * _lt_0_row[17]; // dimensionless
        const double var_t172 = (var_chaste_interface__calcium_dynamics__Ca_i * 2.5) * var_t170; // dimensionless
        const double var_t179 = 1.0 / (669921.875 + var_t169); // dimensionless
        const double var_t181 = 1.0 / (1.3799999999999999 + mParameters[4]); // dimensionless
        const double var_t182 = var_t181 * var_t179; // dimensionless
        const double var_t186 = _lt_0_row[18] * var_t182; // dimensionless
        const double var_t191 = (((_lt_0_row[19] * var_t158) * mParameters[4]) - var_t172) * mParameters[19]; // dimensionless
        const double var_t234 = 1.0 / ((0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i) + var_chaste_interface__potassium_dynamics__K_i); // dimensionless
        const double var_t243 = 1.0 / var_chaste_interface__sodium_dynamics__Na_i; // dimensionless
        const double var_t282 = ((var_chaste_interface__membrane__V < 14.999000000000001) || (15.000999999999999 < var_chaste_interface__membrane__V)) ? (_lt_0_row[20] * var_t97) : ((( -6678.6901680482169 * ((0.24998128375521925 * var_chaste_interface__calcium_dynamics__Ca_ss) - mParameters[4])) *  -0.00099999999999944578) + ((6678.1901680554747 * ((0.25001871764607692 * var_chaste_interface__calcium_dynamics__Ca_ss) - mParameters[4])) * 0.00099999999999944578)); // dimensionless
        const double var_t283 = mParameters[7] * var_t282; // dimensionless
        const double var_t307 = _lt_0_row[18] * var_t181; // dimensionless
        const double var_t312 = 1.0 / var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t316 = var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001; // dimensionless
        const double var_t317 = 1.0 / var_t316; // dimensionless
        const double var_t319 = var_chaste_interface__calcium_dynamics__Ca_i * mParameters[10]; // dimensionless
        const double var_t339 = 8314.4719999999998 * var_t73; // dimensionless
        const double var_t346 = ((_lt_0_row[21] * var_t123) * var_t120) * var_t118; // dimensionless
        const double var_t351 = ((_lt_0_row[21] / pow(var_t122, 2.0)) * var_chaste_interface__sodium_dynamics__Na_i) * var_t121; // dimensionless
        const double var_t367 = var_t4 * 1.0364268649036186e-05; // dimensionless
        const double var_t368 = var_t11 * var_t367; // dimensionless
        const double var_t393 = var_t367 * 2577486.3199999998; // dimensionless
        const double var_t873 = pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2.0); // dimensionless
        const double var_t875 = 1.0 + (400.0 * var_t873); // dimensionless
        const double var_t876 = 1.0 / var_t875; // dimensionless
        const double var_t878 = (80.0 * var_t876) + 2.0; // dimensionless
        const double var_t879 = 1.0 / var_t878; // dimensionless
        const double var_t882 = var_chaste_interface__calcium_dynamics__Ca_ss / pow(var_t875, 2.0); // dimensionless
        const double var_t946 = var_chaste_interface__calcium_dynamics__Ca_i + 0.001; // dimensionless
        const double var_t947 = pow(var_t946, 2.0); // dimensionless
        const double var_t950 = 1.0 + ((1.0 / var_t947) * 0.00020000000000000001); // dimensionless
        const double var_t951 = 1.0 / var_t950; // dimensionless
        const double var_t958 = 0.00063181349969740233 * mParameters[11]; // dimensionless
        const double var_t964 = mParameters[0] * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_i); // dimensionless
        const double var_t966 = pow(var_chaste_interface__calcium_dynamics__Ca_i, 2.0); // dimensionless
        const double var_t969 = 1.0 + ((1.0 / var_t966) * 6.2499999999999997e-08); // dimensionless
        const double var_t971 = (1.0 / var_t969) * mParameters[2]; // dimensionless
        const double var_t976 = 0.0038 * (var_chaste_interface__calcium_dynamics__Ca_ss - var_chaste_interface__calcium_dynamics__Ca_i); // dimensionless
        const double var_t1007 = (-mParameters[0]) - (((((2.0 / var_t966) / var_chaste_interface__calcium_dynamics__Ca_i) * 6.2499999999999997e-08) / pow(var_t969, 2.0)) * mParameters[2]); // dimensionless
        const double var_t1026 = var_t958 * var_t186; // dimensionless
        const double var_t1030 = var_chaste_interface__calcium_dynamics__Ca_SR + 0.29999999999999999; // dimensionless
        const double var_t1031 = pow(var_t1030, 2.0); // dimensionless
        const double var_t1034 = 1.0 + ((1.0 / var_t1031) * 3.0); // dimensionless
        const double var_t1035 = 1.0 / var_t1034; // dimensionless
        const double var_t1039 = 0.14999999999999999 * mParameters[1]; // dimensionless
        const double var_t1042 = pow(var_chaste_interface__calcium_dynamics__Ca_SR, 2.0); // dimensionless
        const double var_t1045 = 1.0 + ((1.0 / var_t1042) * 2.25); // dimensionless
        const double var_t1048 = 2.5 - ((1.0 / var_t1045) * 1.5); // dimensionless
        const double var_t1049 = 1.0 / var_t1048; // dimensionless
        const double var_t1050 = var_t1049 * var_t1039; // dimensionless
        const double var_t1051 = var_chaste_interface__calcium_dynamics__R_prime * var_t873; // dimensionless
        const double var_t1054 = ((var_t1049 * var_t873) * 0.14999999999999999) + 0.059999999999999998; // dimensionless
        const double var_t1055 = 1.0 / var_t1054; // dimensionless
        const double var_t1056 = var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_ss; // dimensionless
        const double var_t1057 = var_t1056 * var_t1055; // dimensionless
        const double var_t1067 = pow(var_t1048, 2.0); // dimensionless
        const double var_t1068 = 1.0 / var_t1067; // dimensionless
        const double var_t1074 = 1.0 / pow(var_t1045, 2.0); // dimensionless
        const double var_t1077 = (1.0 / var_t1042) / var_chaste_interface__calcium_dynamics__Ca_SR; // dimensionless
        const double var_t1078 = (var_t1077 * 2.25) * var_t1074; // dimensionless
        const double var_t1083 = 0.022499999999999999 * mParameters[1]; // dimensionless
        const double var_t1085 = (1.0 / var_t1067) / var_t1048; // dimensionless
        const double var_t1086 = pow(var_t873, 2.0); // dimensionless
        const double var_t1091 = 1.0 / pow(var_t1054, 2.0); // dimensionless
        const double var_t1092 = var_t1056 * var_t1091; // dimensionless
        const double var_t1097 = var_t1055 * var_t1051; // dimensionless
        const double var_t1098 = var_t1097 * var_t1050; // dimensionless
        const double var_t1102 = var_chaste_interface__calcium_dynamics__Ca_ss * var_chaste_interface__calcium_dynamics__R_prime; // dimensionless
        const double var_t1107 = var_t873 * var_chaste_interface__calcium_dynamics__Ca_ss; // dimensionless
        const double var_t1116 = var_t873 * var_t1049; // dimensionless
        const double var_t1120 = var_chaste_interface__calcium_dynamics__Ca_ss + 0.00025000000000000001; // dimensionless
        const double var_t1121 = pow(var_t1120, 2.0); // dimensionless
        const double var_t1124 = 1.0 + ((1.0 / var_t1121) * 0.0001); // dimensionless
        const double var_t1125 = 1.0 / var_t1124; // dimensionless
        const double var_t1128 = var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_t109; // dimensionless
        const double var_t1134 = (18288.2223847842 * mParameters[11]) * 0.0032258064516129032; // dimensionless
        const double var_t1135 = ((var_t1134 * 0.00012027221933034354) * 96485.341499999995) * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass; // dimensionless
        const double var_t1164 = 20.007315288953912 * var_t1056; // dimensionless
        const double var_t1166 = var_t1077 * 2.25; // dimensionless
        const double var_t1168 = ((var_t1166 * var_t1074) * 1.5) * var_t1164; // dimensionless
        const double var_t1177 = var_t1116 * var_t1039; // dimensionless
        const double var_t1178 = var_t1055 * var_chaste_interface__calcium_dynamics__R_prime; // dimensionless
        const double var_t1181 = (20.007315288953912 * var_t1178) * var_t1177; // dimensionless
        const double var_t1189 = var_t1164 * var_t1178; // dimensionless
        const double var_t1228 = var_t1048 * 0.044999999999999998; // dimensionless
        
        rJacobian[0][0] = 1.0 - (var_chaste_interface__environment__dt * (-var_t879));
        rJacobian[0][1] = 0.0;
        rJacobian[0][2] = 0.0;
        rJacobian[0][3] = -(var_chaste_interface__environment__dt * ((( -480.0 * var_t879) * var_t882) + (((64000.0 * var_t882) / pow(var_t878, 2.0)) * (((0.59999999999999998 * var_t876) + 0.40000000000000002) - var_chaste_interface__L_type_Ca_current_fCass_gate__fCass))));
        rJacobian[0][4] = 0.0;
        rJacobian[0][5] = 0.0;
        rJacobian[0][6] = 0.0;
        rJacobian[1][0] = 0.0;
        rJacobian[1][1] = 1.0 - (var_chaste_interface__environment__dt * ((((((2.0 / var_t1031) / var_t1030) * 3.0) * (((((-var_t1050) * var_t1051) * var_t1057) - var_t964) + var_t971)) / pow(var_t1034, 2.0)) + ((((((((((( -2.0 * var_t1039) * 1.5) * var_t1057) * var_t1068) * var_t1078) * var_t873) * var_chaste_interface__calcium_dynamics__R_prime) + ((((((3.0 * var_t1078) * var_t1083) * var_t1085) * var_t1086) * var_t1092) * var_chaste_interface__calcium_dynamics__R_prime)) - var_t1098) - mParameters[0]) * var_t1035)));
        rJacobian[1][2] = -(var_chaste_interface__environment__dt * ((-var_t1007) * var_t1035));
        rJacobian[1][3] = -(var_chaste_interface__environment__dt * ((((((((2.0 * var_t1068) * var_t1083) * var_t1092) * var_t1107) * var_chaste_interface__calcium_dynamics__R_prime) - (((2.0 * var_t1050) * var_t1057) * var_t1102)) + var_t1098) * var_t1035));
        rJacobian[1][4] = -(var_chaste_interface__environment__dt * (((((-var_t1057) * var_t1116) * 0.14999999999999999) * mParameters[1]) * var_t1035));
        rJacobian[1][5] = 0.0;
        rJacobian[1][6] = 0.0;
        rJacobian[2][0] = 0.0;
        rJacobian[2][1] = -(var_chaste_interface__environment__dt * ((0.066691050963179718 * mParameters[0]) * var_t951));
        rJacobian[2][2] = 1.0 - (var_chaste_interface__environment__dt * ((((((2.0 / var_t947) / var_t946) * 0.00020000000000000001) * (((0.066691050963179718 * (var_t964 - var_t971)) + var_t976) - ((0.00031590674984870116 * mParameters[11]) * ((((var_chaste_interface__membrane__V - (((0.5 * log(var_t312 * mParameters[4])) * 1.0364268649036186e-05) * 2577486.3199999998)) * mParameters[8]) + (var_t317 * var_t319)) - ((2.0 * var_t186) * var_t191))))) / pow(var_t950, 2.0)) + ((((0.066691050963179718 * var_t1007) - 0.0038) - ((0.00031590674984870116 * mParameters[11]) * (((((((0.5 * var_t312) * 0.0032129232812012176) * mParameters[8]) * 8314.4719999999998) + (var_t317 * mParameters[10])) - ((1.0 / pow(var_t316, 2.0)) * var_t319)) + (2.0 * (((((var_t307 * var_t179) * 2.5) * var_t169) * _lt_0_row[17]) * mParameters[19]))))) * var_t951)));
        rJacobian[2][3] = -(var_chaste_interface__environment__dt * (0.0038 * var_t951));
        rJacobian[2][4] = 0.0;
        rJacobian[2][5] = 0.0;
        rJacobian[2][6] = -(var_chaste_interface__environment__dt * ((((((3.0 * var_t1026) * mParameters[4]) * var_t157) * _lt_0_row[19]) * mParameters[19]) * var_t951));
        rJacobian[3][0] = -(var_chaste_interface__environment__dt * ((((( -2.0 * var_t1134) * 0.00012027221933034354) * 96485.341499999995) * var_chaste_interface__L_type_Ca_current_f2_gate__f2) * ((var_chaste_interface__L_type_Ca_current_f_gate__f * (var_chaste_interface__L_type_Ca_current_d_gate__d * mParameters[7])) * (var_t282 * var_t1125))));
        rJacobian[3][1] = -(var_chaste_interface__environment__dt * ((((((((( -2.0 * var_t1083) * var_t1085) * var_t1086) * var_t1091) * var_t1168) * var_chaste_interface__calcium_dynamics__R_prime) + ((((2.0 * var_t1039) * var_t1068) * var_t1097) * var_t1168)) + var_t1181) * var_t1125));
        rJacobian[3][2] = -(var_chaste_interface__environment__dt * (1.1399999999999999 * var_t1125));
        rJacobian[3][3] = 1.0 - (var_chaste_interface__environment__dt * ((((((2.0 / var_t1121) / var_t1120) * 0.0001) * ((((( -2.0 * var_t1128) * var_t1135) * var_t283) - (300.0 * var_t976)) + (var_t1177 * var_t1189))) / pow(var_t1124, 2.0)) + ((((((((((( -2.0 * var_t1068) * var_t1083) * var_t1091) * var_t1107) * var_t1164) * var_chaste_interface__calcium_dynamics__R_prime) + ((((2.0 * var_t1039) * var_t1049) * var_t1189) * var_chaste_interface__calcium_dynamics__Ca_ss)) - (((2.0 * var_t1128) * var_t1135) * (mParameters[7] * _lt_0_row[22]))) - 1.1399999999999999) - var_t1181) * var_t1125)));
        rJacobian[3][4] = -(var_chaste_interface__environment__dt * ((((((var_t1164 * var_t1055) * var_t873) * var_t1049) * 0.14999999999999999) * mParameters[1]) * var_t1125));
        rJacobian[3][5] = 0.0;
        rJacobian[3][6] = 0.0;
        rJacobian[4][0] = 0.0;
        rJacobian[4][1] = -(var_chaste_interface__environment__dt * (((((2.0 * var_t1102) * var_t1166) * var_t1074) * 1.5) * 0.044999999999999998));
        rJacobian[4][2] = 0.0;
        rJacobian[4][3] = -(var_chaste_interface__environment__dt * ((-var_chaste_interface__calcium_dynamics__R_prime) * var_t1228));
        rJacobian[4][4] = 1.0 - (var_chaste_interface__environment__dt * (((-var_t1228) * var_chaste_interface__calcium_dynamics__Ca_ss) - 0.0050000000000000001));
        rJacobian[4][5] = 0.0;
        rJacobian[4][6] = 0.0;
        rJacobian[5][0] = 0.0;
        rJacobian[5][1] = 0.0;
        rJacobian[5][2] = 0.0;
        rJacobian[5][3] = 0.0;
        rJacobian[5][4] = 0.0;
        rJacobian[5][5] = 1.0 - (var_chaste_interface__environment__dt * (((-var_t958) * (((((((-(((((0.0025819888969999998 * var_t368) * 2577486.3199999998) * var_t39) * var_t63) * var_t15)) - (((0.043033148290000003 * (((((( -0.0060000000000000001 * var_t368) * 310.0) * 8314.4719999999998) * var_t14) + (var_t33 * ((((0.00059999999999999995 * var_t21) * var_t367) * 2577486.3199999998) + (((0.10000000000000001 * var_t26) * var_t367) * 2577486.3199999998)))) + (((((0.5 * var_t31) * var_t4) * 0.0032129232812012176) * 8314.4719999999998) * var_t56))) * var_t40) * var_t47)) + ((0.043033148290000003 * var_t393) * var_t64)) + (var_t393 * var_t67)) + ((0.43033148290000001 * var_t393) * var_t70)) + ((var_t234 * 0.0032129232812012176) * var_t339)) + ((((_lt_0_row[23] * var_t367) * mParameters[16]) * 8314.4719999999998) * 310.0))) * mParameters[3]));
        rJacobian[5][6] = -(var_chaste_interface__environment__dt * (((-var_t958) * (((((0.029999999999999999 * var_t234) * 0.0032129232812012176) * var_t339) - (2.0 * var_t346)) + (2.0 * var_t351))) * mParameters[3]));
        rJacobian[6][0] = 0.0;
        rJacobian[6][1] = 0.0;
        rJacobian[6][2] = -(var_chaste_interface__environment__dt * (((((3.0 * var_t1026) * 2.5) * var_t170) * mParameters[3]) * mParameters[19]));
        rJacobian[6][3] = 0.0;
        rJacobian[6][4] = 0.0;
        rJacobian[6][5] = 0.0;
        rJacobian[6][6] = 1.0 - (var_chaste_interface__environment__dt * (((-var_t958) * (((((((var_t243 * 1.0364268649036186e-05) * 2577486.3199999998) * var_t149) + (((var_t243 * 0.0032129232812012176) * mParameters[9]) * 8314.4719999999998)) + (3.0 * var_t346)) - (3.0 * var_t351)) + (9.0 * (((((var_t307 * var_t179) * mParameters[4]) * var_t157) * _lt_0_row[19]) * mParameters[19])))) * mParameters[3]));
    }
    
    void Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.709
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = rY[1];
        // Units: dimensionless; Initial value: 0.00448
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = rY[2];
        // Units: dimensionless; Initial value: 0.476
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = rY[3];
        // Units: dimensionless; Initial value: 0.0087
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.00155
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[5];
        // Units: dimensionless; Initial value: 0.7573
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[6];
        // Units: dimensionless; Initial value: 0.7225
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 3.164e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.8009
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.9778
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = rY[10];
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = rY[11];
        // Units: dimensionless; Initial value: 0.3212
        double var_chaste_interface__transient_outward_current_r_gate__r = rY[12];
        // Units: dimensionless; Initial value: 2.235e-8
        double var_chaste_interface__calcium_dynamics__Ca_i = rY[13];
        // Units: millimolar; Initial value: 0.00013
        double var_chaste_interface__calcium_dynamics__Ca_ss = rY[15];
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__sodium_dynamics__Na_i = rY[17];
        // Units: millimolar; Initial value: 10.355
        double var_chaste_interface__potassium_dynamics__K_i = rY[18];
        // Units: millimolar; Initial value: 138.4
        
        // Lookup table indexing
        const bool _oob_0 = Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(mParameters[5] / var_chaste_interface__potassium_dynamics__K_i); // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 200.0))); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = mParameters[15] * (var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + (((3.0 * exp(0.00020000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) + 100.0))) + exp(0.10000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 10.0))) / (1.0 + exp( -0.5 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)))))) * sqrt(mParameters[5] * 0.18518518518518517) * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_transient_outward_current__i_to = mParameters[24] * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr = mParameters[17] * sqrt(mParameters[5] * 0.18518518518518517) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks = mParameters[18] * pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0) * (var_chaste_interface__membrane__V - (26.713760659695648 * log((mParameters[5] + (0.029999999999999999 * mParameters[6])) / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i))))); // picoA_per_picoF
        const double var_L_type_Ca_current__i_CaL = ((((var_chaste_interface__membrane__V < 14.999000000000001) || (var_chaste_interface__membrane__V > 15.000999999999999)) ? (((var_chaste_interface__membrane__V - 15.0) * ((0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * _lt_0_row[24]) - mParameters[4])) / _lt_0_row[25]) : (((( -0.00099999999999944578 * ((var_chaste_interface__calcium_dynamics__Ca_ss * 0.24998128375521925) - mParameters[4])) *  -13357.380336096434) + ((0.00099999999999944578 * ((var_chaste_interface__calcium_dynamics__Ca_ss * 0.25001871764607692) - mParameters[4])) * 13356.380336110949)) * 0.5)) * mParameters[7] * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * 37237684497.486488) * 3.8797490106562429e-07; // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = ((((mParameters[20] * mParameters[5]) / (mParameters[5] + 1.0)) * var_chaste_interface__sodium_dynamics__Na_i) / (var_chaste_interface__sodium_dynamics__Na_i + 40.0)) / _lt_0_row[26]; // picoA_per_picoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(mParameters[6] / var_chaste_interface__sodium_dynamics__Na_i); // millivolt
        const double var_fast_sodium_current__i_Na = mParameters[12] * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na = mParameters[9] * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa = (mParameters[19] * ((_lt_0_row[27] * pow(var_chaste_interface__sodium_dynamics__Na_i, 3.0) * mParameters[4]) - (_lt_0_row[28] * pow(mParameters[6], 3.0) * var_chaste_interface__calcium_dynamics__Ca_i * 2.5))) / ((669921.875 + pow(mParameters[6], 3.0)) * (1.3799999999999999 + mParameters[4]) * _lt_0_row[29]); // picoA_per_picoF
        const double var_calcium_background_current__i_b_Ca = mParameters[8] * (var_chaste_interface__membrane__V - (13.356880329847824 * log(mParameters[4] / var_chaste_interface__calcium_dynamics__Ca_i))); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K = (mParameters[16] * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)) / _lt_0_row[30]; // picoA_per_picoF
        const double var_potassium_atp_current__ATP_i = 3.0; // millimolar
        const double var_potassium_atp_current__i_K_ATP = 0.19500000000000001 * (1.0 / (1.0 - pow(var_potassium_atp_current__ATP_i * 8.7719298245614024, 2.0))) * pow(mParameters[5] * 0.18518518518518517, 0.23999999999999999) * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca = (mParameters[10] * var_chaste_interface__calcium_dynamics__Ca_i) / (var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001); // picoA_per_picoF
        const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double d_dt_chaste_interface__membrane__V =  -1.0 * (var_inward_rectifier_potassium_current__i_K1 + var_transient_outward_current__i_to + var_rapid_time_dependent_potassium_current__i_Kr + var_slow_time_dependent_potassium_current__i_Ks + var_L_type_Ca_current__i_CaL + var_sodium_potassium_pump_current__i_NaK + var_fast_sodium_current__i_Na + var_sodium_background_current__i_b_Na + var_sodium_calcium_exchanger_current__i_NaCa + var_calcium_background_current__i_b_Ca + var_potassium_pump_current__i_p_K + var_potassium_atp_current__i_K_ATP + var_calcium_pump_current__i_p_Ca + (var_chaste_interface__membrane__i_Stim / HeartConfig::Instance()->GetCapacitance())); // 'millivolt per millisecond'
        
        rY[0] += mDt*d_dt_chaste_interface__membrane__V;
    }
    
    void Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.709
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = rY[1];
        // Units: dimensionless; Initial value: 0.00448
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = rY[2];
        // Units: dimensionless; Initial value: 0.476
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = rY[3];
        // Units: dimensionless; Initial value: 0.0087
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.00155
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[5];
        // Units: dimensionless; Initial value: 0.7573
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[6];
        // Units: dimensionless; Initial value: 0.7225
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 3.164e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.8009
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.9778
        double var_chaste_interface__transient_outward_current_s_gate__s = rY[11];
        // Units: dimensionless; Initial value: 0.3212
        double var_chaste_interface__transient_outward_current_r_gate__r = rY[12];
        // Units: dimensionless; Initial value: 2.235e-8
        
        const double var_chaste_interface__environment__dt = mDt;

        // Lookup table indexing
        const bool _oob_0 = Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_fast_sodium_current_h_gate__tau_h = 1.0 / (((var_chaste_interface__membrane__V < ( -40.0 + mParameters[14])) ? (0.057000000000000002 * exp((-((var_chaste_interface__membrane__V + 80.0) - mParameters[14])) * 0.14705882352941177)) : 0.0) + ((var_chaste_interface__membrane__V < ( -40.0 + mParameters[14])) ? ((2.7000000000000002 * exp(0.079000000000000001 * (var_chaste_interface__membrane__V - mParameters[14]))) + (310000.0 * exp(0.34849999999999998 * (var_chaste_interface__membrane__V - mParameters[14])))) : (0.77000000000000002 / (0.13 * (1.0 + exp(((var_chaste_interface__membrane__V + 10.66) - mParameters[14]) *  -0.0900900900900901)))))); // millisecond
        const double var_fast_sodium_current_j_gate__tau_j = 1.0 / (((var_chaste_interface__membrane__V < ( -40.0 + mParameters[14])) ? ((((( -25428.0 * exp(0.24440000000000001 * (var_chaste_interface__membrane__V - mParameters[14]))) - (6.9480000000000002e-06 * exp( -0.043909999999999998 * (var_chaste_interface__membrane__V - mParameters[14])))) * (var_chaste_interface__membrane__V + 37.780000000000001)) * 1.0) / (1.0 + exp(0.311 * ((var_chaste_interface__membrane__V + 79.230000000000004) - mParameters[14])))) : 0.0) + ((var_chaste_interface__membrane__V < ( -40.0 + mParameters[14])) ? ((0.024240000000000001 * exp( -0.01052 * (var_chaste_interface__membrane__V - mParameters[14]))) / (1.0 + exp( -0.13780000000000001 * ((var_chaste_interface__membrane__V + 40.140000000000001) - mParameters[14])))) : ((0.59999999999999998 * exp(0.057000000000000002 * (var_chaste_interface__membrane__V - mParameters[14]))) / (1.0 + exp( -0.10000000000000001 * ((var_chaste_interface__membrane__V + 32.0) - mParameters[14])))))); // millisecond
        const double var_L_type_Ca_current_f_gate__tau_f = (1102.5 * exp((-pow(var_chaste_interface__membrane__V + 27.0, 2.0)) * 0.0044444444444444444)) + (200.0 / (1.0 + exp((13.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) + (180.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.10000000000000001))) + 20.0; // millisecond
        const double var_L_type_Ca_current_f2_gate__tau_f2 = (562.0 * exp((-pow(var_chaste_interface__membrane__V + 27.0, 2.0)) * 0.0041666666666666666)) + (31.0 / (1.0 + exp((25.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) + (80.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.10000000000000001))); // millisecond
        
        rY[7] = (var_chaste_interface__L_type_Ca_current_d_gate__d + (_lt_0_row[0] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[1] * var_chaste_interface__environment__dt));
        rY[9] = (var_chaste_interface__L_type_Ca_current_f2_gate__f2 + ((_lt_0_row[2] / var_L_type_Ca_current_f2_gate__tau_f2) * var_chaste_interface__environment__dt)) / (1.0 - (( -1.0 / var_L_type_Ca_current_f2_gate__tau_f2) * var_chaste_interface__environment__dt));
        rY[8] = (var_chaste_interface__L_type_Ca_current_f_gate__f + ((_lt_0_row[3] / var_L_type_Ca_current_f_gate__tau_f) * var_chaste_interface__environment__dt)) / (1.0 - (( -1.0 / var_L_type_Ca_current_f_gate__tau_f) * var_chaste_interface__environment__dt));
        rY[5] = (var_chaste_interface__fast_sodium_current_h_gate__h + (((((1.0 * (1.0 - (mParameters[13] * 0.01))) / pow(1.0 + exp(((var_chaste_interface__membrane__V + 71.549999999999997) - mParameters[14]) * 0.13458950201884254), 2.0)) + (mParameters[13] * 0.01)) / var_fast_sodium_current_h_gate__tau_h) * var_chaste_interface__environment__dt)) / (1.0 - (( -1.0 / var_fast_sodium_current_h_gate__tau_h) * var_chaste_interface__environment__dt));
        rY[6] = (var_chaste_interface__fast_sodium_current_j_gate__j + (((((1.0 * (1.0 - (mParameters[13] * 0.01))) / pow(1.0 + exp(((var_chaste_interface__membrane__V + 71.549999999999997) - mParameters[14]) * 0.13458950201884254), 2.0)) + (mParameters[13] * 0.01)) / var_fast_sodium_current_j_gate__tau_j) * var_chaste_interface__environment__dt)) / (1.0 - (( -1.0 / var_fast_sodium_current_j_gate__tau_j) * var_chaste_interface__environment__dt));
        rY[4] = (var_chaste_interface__fast_sodium_current_m_gate__m + (_lt_0_row[4] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[5] * var_chaste_interface__environment__dt));
        rY[1] = (var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 + (_lt_0_row[6] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[7] * var_chaste_interface__environment__dt));
        rY[2] = (var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 + (_lt_0_row[8] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[9] * var_chaste_interface__environment__dt));
        rY[3] = (var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs + (_lt_0_row[10] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[11] * var_chaste_interface__environment__dt));
        rY[12] = (var_chaste_interface__transient_outward_current_r_gate__r + (_lt_0_row[12] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[13] * var_chaste_interface__environment__dt));
        rY[11] = (var_chaste_interface__transient_outward_current_s_gate__s + (_lt_0_row[14] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[15] * var_chaste_interface__environment__dt));
        
        double _guess[7] = {rY[10],rY[14],rY[13],rY[15],rY[16],rY[18],rY[17]};
        CardiacNewtonSolver<7,Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler>* _p_solver = CardiacNewtonSolver<7,Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler>::Instance();
        _p_solver->Solve(*this, var_chaste_interface__environment__time, _guess);
        rY[10] = _guess[0];
        rY[14] = _guess[1];
        rY[13] = _guess[2];
        rY[15] = _guess[3];
        rY[16] = _guess[4];
        rY[18] = _guess[5];
        rY[17] = _guess[6];
    }
    
template<>
void OdeSystemInformation<Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler>::Initialise(void)
{
    this->mSystemName = "tentusscher_model_2006_endo";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-86.709);

    // rY[1]:
    this->mVariableNames.push_back("rapid_time_dependent_potassium_current_Xr1_gate__Xr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00448);

    // rY[2]:
    this->mVariableNames.push_back("rapid_time_dependent_potassium_current_Xr2_gate__Xr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.476);

    // rY[3]:
    this->mVariableNames.push_back("slow_time_dependent_potassium_current_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0087);

    // rY[4]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00155);

    // rY[5]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7573);

    // rY[6]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7225);

    // rY[7]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.164e-5);

    // rY[8]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.8009);

    // rY[9]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f2_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9778);

    // rY[10]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9953);

    // rY[11]:
    this->mVariableNames.push_back("transient_outward_current_s_gate__s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.3212);

    // rY[12]:
    this->mVariableNames.push_back("transient_outward_current_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.235e-8);

    // rY[13]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00013);

    // rY[14]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(3.715);

    // rY[15]:
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00036);

    // rY[16]:
    this->mVariableNames.push_back("calcium_dynamics__R_prime");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9068);

    // rY[17]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(10.355);

    // rY[18]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(138.4);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("per_millisecond");
    
    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_millisecond");
    
    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("millimolar_per_millisecond");
    
    // mParameters[3]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");
    
    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");
    
    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");
    
    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");
    
    // mParameters[7]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("litre_per_farad_second");
    
    // mParameters[8]:
    this->mParameterNames.push_back("membrane_background_calcium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");
    
    // mParameters[9]:
    this->mParameterNames.push_back("membrane_background_sodium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");
    
    // mParameters[10]:
    this->mParameterNames.push_back("membrane_calcium_pump_current_conductance");
    this->mParameterUnits.push_back("picoA_per_picoF");
    
    // mParameters[11]:
    this->mParameterNames.push_back("membrane_capacitance");
    this->mParameterUnits.push_back("microF");
    
    // mParameters[12]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");
    
    // mParameters[13]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");
    
    // mParameters[14]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("millivolt");
    
    // mParameters[15]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");
    
    // mParameters[16]:
    this->mParameterNames.push_back("membrane_potassium_pump_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");
    
    // mParameters[17]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");
    
    // mParameters[18]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");
    
    // mParameters[19]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("picoA_per_picoF");
    
    // mParameters[20]:
    this->mParameterNames.push_back("membrane_sodium_potassium_pump_current_permeability");
    this->mParameterUnits.push_back("picoA_per_picoF");
    
    // mParameters[21]:
    this->mParameterNames.push_back("membrane_stimulus_current_duration");
    this->mParameterUnits.push_back("millisecond");
    
    // mParameters[22]:
    this->mParameterNames.push_back("membrane_stimulus_current_offset");
    this->mParameterUnits.push_back("millisecond");
    
    // mParameters[23]:
    this->mParameterNames.push_back("membrane_stimulus_current_period");
    this->mParameterUnits.push_back("millisecond");
    
    // mParameters[24]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellten_tusscher_ischemic_model_endoFromCellMLBackwardEuler)
